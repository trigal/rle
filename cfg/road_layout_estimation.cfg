#!/usr/bin/env python
PACKAGE = "road_layout_estimation"

#    __   __       ___     ___  __    ___
#   |  \ /  \ |\ |  |     |__  |  \ |  |
#   |__/ \__/ | \|  |     |___ |__/ |  |
#
#       use the launch file instead

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("particles_number",             int_t,      0, "Particles number"                                                   , 10  , 1     , 10000)
gen.add("resampling_interval",          int_t,      0, "Resampling Interval"                                                ,  2  , 1     , 10000)

# How narrow are the gaussians for evaluate the scores - radTodeg *180/3.14 -- degToRag *3.14/180
gen.add("street_distribution_sigma",    double_t,   0, "Gaussian distribution sigma for pose difference (m)"                , 1.00 , 0.001, 25)
gen.add("angle_distribution_sigma",     double_t,   0, "Gaussian distribution sigma for orientation difference (rad)"       , 0.15 , 0.001, 6) #0.25

# Weights for each component
gen.add("street_distribution_weight",   double_t,   0, "Tells how does street pdf weight on score calculation"              , 1    , 0.0  , 10) #1.0
gen.add("angle_distribution_weight",    double_t,   0, "Tells how does angle pdf weight on score calculation"               , 1    , 0.0  , 10) #1.2
gen.add("roadState_distribution_weight",double_t,   0, "Tells how does the roadState component weight on score calculation" , 2    , 0.0  , 10) #1.2


#State6DOF ***ABSOLUTE***
gen.add("propagate_translational_absolute_vel_error_x",             double_t, 0, "Motion model propagate random err (m)"   , 0.300, 0.001, 5.0) #0.250
gen.add("propagate_translational_absolute_vel_error_y",             double_t, 0, "Motion model propagate random err (m)"   , 0.020, 0.001, 5.0) #0.200
gen.add("propagate_translational_absolute_vel_error_z",             double_t, 0, "Motion model propagate random err (m)"   , 0.010, 0.001, 5.0) #0.010
gen.add("propagate_rotational_absolute_vel_error",                  double_t, 0, "Motion model propagate random err (rad)" , 0.035, 0.001, 5.0) #0.025

#State6DOF ***PERCENTAGE***
gen.add("propagate_translational_percentage_vel_error_x",  double_t, 0, "Motion model propagate random err (percentage)"   , 0.400, 0.001, 1.0)
gen.add("propagate_translational_percentage_vel_error_y",  double_t, 0, "Motion model propagate random err (percentage)"   , 0.350, 0.001, 1.0)
gen.add("propagate_translational_percentage_vel_error_z",  double_t, 0, "Motion model propagate random err (percentage)"   , 0.310, 0.001, 1.0)
gen.add("propagate_rotational_percentage_vel_error",       double_t, 0, "Motion model propagate random err (percentage)"   , 0.100, 0.001, 1.0) #0.3


##### UNUSED EKF PARAMETERS #####
## EKF -> R_t (st.dev here)
#gen.add("mtn_model_position_uncertainty",                  double_t, 0, "Motion model uncertainty (m)"                    , 0.100, 0.001, 2.0) #pose
#gen.add("mtn_model_orientation_uncertainty",               double_t, 0, "Motion model uncertainty (m)"                    , 0.104, 0.001, 2.0) #rotation
#gen.add("mtn_model_linear_uncertainty",                    double_t, 0, "Motion model uncertainty (m)"                    , 0.100, 0.001, 2.0) #speed pose
#gen.add("mtn_model_angular_uncertainty",                   double_t, 0, "Motion model uncertainty (rad)"                  , 0.104, 0.001, 2.0) #speed rotation
## EKF -> Q_t (st.dev here)
#gen.add("msr_model_position_uncertainty",                  double_t, 0, "Measurement model uncertainty (m)"               , 0.300, 0.001, 2.0)
#gen.add("msr_model_orientation_uncertainty",               double_t, 0, "Measurement model uncertainty (m)"               , 0.300, 0.001, 2.0)
#gen.add("msr_model_linear_uncertainty",                    double_t, 0, "Measurement model uncertainty (m)"               , 0.300, 0.001, 2.0)
#gen.add("msr_model_angular_uncertainty",                   double_t, 0, "Measurement model uncertainty (rad)"             , 0.260, 0.001, 2.0)

exit(gen.generate(PACKAGE, "road_layout_estimation", "road_layout_estimation"))
