#!/usr/bin/env python
PACKAGE = "road_layout_estimation"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("particles_number",             int_t,      0, "Particles number"                                               , 19  , 1     , 10000)

# How narrow are the gaussians for evaluate the scores - radTodeg *180/3.14 -- degToRag *3.14/180
gen.add("street_distribution_sigma",    double_t,   0, "Gaussian distribution sigma for pose difference (m)"            , 1.00 , 0.001, 25)
gen.add("angle_distribution_sigma",     double_t,   0, "Gaussian distribution sigma for orientation difference (rad)"   , 0.25 , 0.001, 6)

# Weights for each component
gen.add("street_distribution_weight",   double_t,   0, "Tells how does street pdf weight on score calculation"          , 1    , 0.0  , 5)
gen.add("angle_distribution_weight",    double_t,   0, "Tells how does angle pdf weight on score calculation"           , 1    , 0.0  , 5)

# EKF -> R_t (st.dev here)
gen.add("mtn_model_position_uncertainty",                  double_t, 0, "Motion model uncertainty (m)"                  , 0.100, 0.001, 2.0)
gen.add("mtn_model_orientation_uncertainty",               double_t, 0, "Motion model uncertainty (m)"                  , 0.050, 0.001, 2.0)
gen.add("mtn_model_linear_uncertainty",                    double_t, 0, "Motion model uncertainty (m)"                  , 0.050, 0.001, 2.0)
gen.add("mtn_model_angular_uncertainty",                   double_t, 0, "Motion model uncertainty (rad)"                , 0.025, 0.001, 2.0)

# EKF -> Q_t (st.dev here)
gen.add("msr_model_position_uncertainty",                  double_t, 0, "Measurement model uncertainty (m)"             , 0.5100, 0.001, 2.0)
gen.add("msr_model_orientation_uncertainty",               double_t, 0, "Measurement model uncertainty (m)"             , 0.5100, 0.001, 2.0)
gen.add("msr_model_linear_uncertainty",                    double_t, 0, "Measurement model uncertainty (m)"             , 0.5100, 0.001, 2.0)
gen.add("msr_model_angular_uncertainty",                   double_t, 0, "Measurement model uncertainty (rad)"           , 0.5100, 0.001, 2.0)

#State6DOF MotionModel::propagatePoseWithControl(State6DOF& p_state,State6DOF& control)
gen.add("propagate_translational_vel_error_x",             double_t, 0, "Motion model propagate random err (m)"         , 0.250, 0.001, 5.0)
gen.add("propagate_translational_vel_error_y",             double_t, 0, "Motion model propagate random err (m)"         , 0.200, 0.001, 5.0)
gen.add("propagate_translational_vel_error_z",             double_t, 0, "Motion model propagate random err (m)"         , 0.010, 0.001, 5.0)
gen.add("propagate_rotational_vel_error",                  double_t, 0, "Motion model propagate random err (rad)"       , 0.005, 0.001, 5.0)

#State6DOF MotionModel::propagatePoseWithPercentage(State6DOF& p_state) && propagatePoseWithControlPercentage && propagatePoseWithPercentageAndDelta
gen.add("propagate_translational_percentage_vel_error_x",  double_t, 0, "Motion model propagate random err (percentage)", 0.100, 0.001, 1.0)
gen.add("propagate_translational_percentage_vel_error_y",  double_t, 0, "Motion model propagate random err (percentage)", 0.050, 0.001, 1.0)
gen.add("propagate_translational_percentage_vel_error_z",  double_t, 0, "Motion model propagate random err (percentage)", 0.010, 0.001, 1.0)
gen.add("propagate_rotational_percentage_vel_error",       double_t, 0, "Motion model propagate random err (percentage)", 0.100, 0.001, 1.0)

exit(gen.generate(PACKAGE, "road_layout_estimation", "road_layout_estimation"))
